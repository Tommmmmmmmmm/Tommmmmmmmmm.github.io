<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>夜空中最亮的派大星</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-02-14T12:42:15.104Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>夜空中最亮的派大星</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MyFirstBlog</title>
    <link href="http://example.com/2023/02/14/MyFirstBlog/"/>
    <id>http://example.com/2023/02/14/MyFirstBlog/</id>
    <published>2023-02-14T12:42:15.000Z</published>
    <updated>2023-02-14T12:42:15.104Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2023/02/14/hello-world/"/>
    <id>http://example.com/2023/02/14/hello-world/</id>
    <published>2023-02-14T12:25:48.470Z</published>
    <updated>2023-02-14T12:25:48.470Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>About Thread</title>
    <link href="http://example.com/2023/01/03/20230103Thread/"/>
    <id>http://example.com/2023/01/03/20230103Thread/</id>
    <published>2023-01-03T06:29:49.018Z</published>
    <updated>2023-02-15T01:12:29.051Z</updated>
    
    <content type="html"><![CDATA[<h1 id="线程是什么？"><a href="#线程是什么？" class="headerlink" title="线程是什么？"></a>线程是什么？</h1><blockquote><p>线程就是进程中的一个任务，一个进程可以有多个线程，但是一个线程只能存在在一个进程中。<br>并行：多个线程一起执行，多核CPU同时处理多个线程。<br>并发：多个线程交替运行。单核CPU的时间片交替分配给多个线程，时间是纳秒级别的，因此宏观上看是同时进行的。</p></blockquote><h1 id="Java创建线程-一个继承，两个实现"><a href="#Java创建线程-一个继承，两个实现" class="headerlink" title="Java创建线程(一个继承，两个实现)"></a>Java创建线程(一个继承，两个实现)</h1><h2 id="1-继承Thread类"><a href="#1-继承Thread类" class="headerlink" title="1. 继承Thread类"></a>1. 继承Thread类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Task</span>();</span><br><span class="line">      task.start();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Task</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;启动&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-实现Runnable接口"><a href="#2-实现Runnable接口" class="headerlink" title="2.实现Runnable接口"></a>2.实现Runnable接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Task</span>();</span><br><span class="line">    Thread thread=<span class="keyword">new</span> <span class="title class_">Thread</span>(task);</span><br><span class="line">    thread.start();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Task</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;启动&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-实现Callable接口"><a href="#3-实现Callable接口" class="headerlink" title="3.实现Callable接口"></a>3.实现Callable接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Task</span>();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">FutureTask</span> <span class="variable">futureTask</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(task);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(futureTask);</span><br><span class="line">        thread.start();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Task</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;启动&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="为什么重写了run方法，但是启动线程时却调用了start方法"><a href="#为什么重写了run方法，但是启动线程时却调用了start方法" class="headerlink" title="为什么重写了run方法，但是启动线程时却调用了start方法"></a>为什么重写了run方法，但是启动线程时却调用了start方法</h1><p>使用start，由操作系统的线程调度策略来决定。run方法是一般Java的调用：先被调用就会先执行，后被调用就会后执行。</p><h1 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h1><blockquote><p>1.NEW 创建<br>2.RUNNABLE 运行<br>3.BLOCKED 阻塞<br>4.WAITING 等待<br>5.TIMED_WAITING 超时等待<br>6.TERMINATED 终止</p></blockquote><h1 id="线程同步问题，去加锁解决"><a href="#线程同步问题，去加锁解决" class="headerlink" title="线程同步问题，去加锁解决"></a>线程同步问题，去加锁解决</h1><blockquote><p>1.synchronize 代码块</p></blockquote><h1 id="死锁是怎么产生的"><a href="#死锁是怎么产生的" class="headerlink" title="死锁是怎么产生的"></a>死锁是怎么产生的</h1><blockquote><p>由于资源的交叉引用，锁中嵌套锁。</p></blockquote><h1 id="如何防止死锁"><a href="#如何防止死锁" class="headerlink" title="如何防止死锁"></a>如何防止死锁</h1><blockquote><p>1.减少对公共资源的引用<br>2.使用完后立即释放资源<br>3.增加超时机制</p></blockquote><h1 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h1><blockquote><p>由于线程是与CPU关联，对内存使用相关。所以如果无线创建线程，就会导致内存溢出。因此引入了线程池。JUC:Java.Util.Concurrent</p></blockquote><h2 id="JUC提供的四种线程池"><a href="#JUC提供的四种线程池" class="headerlink" title="JUC提供的四种线程池"></a>JUC提供的四种线程池</h2><blockquote><p>1.定长线程池：初始化时就设置了池的容量。<br>2.可缓存线程池：最大容量没有限制，空闲的线程会重复利用。<br>3.单一线程池：只有一个线程。<br>4.周期线程池：定时去创建线程，有频率。</p></blockquote><h1 id="ThreadLocal两大用途"><a href="#ThreadLocal两大用途" class="headerlink" title="ThreadLocal两大用途"></a>ThreadLocal两大用途</h1><blockquote><p>工具类多线程安全问题，虽然可以加锁解决，但是加锁对资源占用大。<br>多赋值场景，如：拦截器获取的用户。只需赋值一次。</p></blockquote><h1 id="使用ThreadLocal的优点"><a href="#使用ThreadLocal的优点" class="headerlink" title="使用ThreadLocal的优点"></a>使用ThreadLocal的优点</h1><h1 id="ThreadLocal主要的四个放法"><a href="#ThreadLocal主要的四个放法" class="headerlink" title="ThreadLocal主要的四个放法"></a>ThreadLocal主要的四个放法</h1><blockquote><p>set<br>innitialValue<br>get<br>remove</p></blockquote><h1 id="Thread、ThreadLocal、ThreadLocalMap"><a href="#Thread、ThreadLocal、ThreadLocalMap" class="headerlink" title="Thread、ThreadLocal、ThreadLocalMap"></a>Thread、ThreadLocal、ThreadLocalMap</h1><blockquote><p>每一个线程Thread 都有ThreadLocalMap 每一个ThreadMap有多个ThreadLocal </p></blockquote><h1 id="使用ThreaLocal需要注意的五点"><a href="#使用ThreaLocal需要注意的五点" class="headerlink" title="使用ThreaLocal需要注意的五点"></a>使用ThreaLocal需要注意的五点</h1><blockquote><p>内存泄漏 ThreadLocalMap的Key是弱引用<br>如果可以不适用ThreadLocal就可以解决问题，那就不使用ThreadLocal</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;线程是什么？&quot;&gt;&lt;a href=&quot;#线程是什么？&quot; class=&quot;headerlink&quot; title=&quot;线程是什么？&quot;&gt;&lt;/a&gt;线程是什么？&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;线程就是进程中的一个任务，一个进程可以有多个线程，但是一个线程只能存在在一个进程中</summary>
      
    
    
    
    
  </entry>
  
</feed>
